// <auto-generated />
using System;
using HRSTAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRSTAPI.Migrations
{
    [DbContext(typeof(HrstContext))]
    [Migration("20250902124106_InitialMigrationIdentity2")]
    partial class InitialMigrationIdentity2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HRSTAPI.Models.HrstDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BehavioralRisk")
                        .HasColumnType("int");

                    b.Property<string>("BehavioralRiskOther")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CMVInfections")
                        .HasColumnType("bit");

                    b.Property<bool>("CNSRelatedInfectionsLymphoma")
                        .HasColumnType("bit");

                    b.Property<bool>("CervicalCarcinoma")
                        .HasColumnType("bit");

                    b.Property<int>("ClinicalSign")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalSignOther")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DivorcedWidowWidower")
                        .HasColumnType("bit");

                    b.Property<int>("EligibleForTesting")
                        .HasColumnType("int");

                    b.Property<int>("EscortedForLinkage")
                        .HasColumnType("int");

                    b.Property<bool>("EsophagealCandidiasis")
                        .HasColumnType("bit");

                    b.Property<bool>("ExchangedSexForMoney")
                        .HasColumnType("bit");

                    b.Property<int>("HIVTestResult")
                        .HasColumnType("int");

                    b.Property<bool>("HerpesZoster")
                        .HasColumnType("bit");

                    b.Property<bool>("HighRiskAdolescentGirlYoungWomen")
                        .HasColumnType("bit");

                    b.Property<bool>("HistoryofSexualViolence")
                        .HasColumnType("bit");

                    b.Property<bool>("KaposiSarcoma")
                        .HasColumnType("bit");

                    b.Property<int>("KnownHIVPositive")
                        .HasColumnType("int");

                    b.Property<bool>("Leishmaniosis")
                        .HasColumnType("bit");

                    b.Property<bool>("LongDistanceDriver")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mrn")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("MultipleSexualPartners")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedleSharingforInjection")
                        .HasColumnType("bit");

                    b.Property<bool>("OralUlceration")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherBehavioralRiks")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherPatientGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherSign")
                        .HasColumnType("bit");

                    b.Property<bool>("PCP")
                        .HasColumnType("bit");

                    b.Property<bool>("PWID")
                        .HasColumnType("bit");

                    b.Property<bool>("PartnerofKnownHIVPositive")
                        .HasColumnType("bit");

                    b.Property<string>("PatientGroupOther")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PatientOnART")
                        .HasColumnType("int");

                    b.Property<bool>("PersistentGeneralizedLymphadenopathy")
                        .HasColumnType("bit");

                    b.Property<bool>("PresumptiveTBConfirmedTB")
                        .HasColumnType("bit");

                    b.Property<bool>("Prisoners")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReceivedHIVTestSameDate")
                        .HasColumnType("int");

                    b.Property<string>("ReceivedHIVTestSameDateOther")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RecurrentRespiratoryTractInfections")
                        .HasColumnType("bit");

                    b.Property<bool>("RecurrentSevereBacterialInfections")
                        .HasColumnType("bit");

                    b.Property<bool>("STI")
                        .HasColumnType("bit");

                    b.Property<bool>("STIHistory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScreenedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<bool>("SexWithNonRegularPartner")
                        .HasColumnType("bit");

                    b.Property<bool>("SexualPartnerPLHIV")
                        .HasColumnType("bit");

                    b.Property<bool>("SexualPracticeUnderInfluence")
                        .HasColumnType("bit");

                    b.Property<bool>("SkinRelatedProblem")
                        .HasColumnType("bit");

                    b.Property<bool>("UnexplainedChronicDiarrhea")
                        .HasColumnType("bit");

                    b.Property<bool>("UnexplainedPersistentFever")
                        .HasColumnType("bit");

                    b.Property<bool>("UnexplainedPersistentHepatosplenomegaly")
                        .HasColumnType("bit");

                    b.Property<bool>("UnexplainedWeightLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("UnprotectedSex")
                        .HasColumnType("bit");

                    b.Property<bool>("WomenEngagedCommercialSex")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkersHotSpotArea")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HrstDetails");
                });

            modelBuilder.Entity("HRSTAPI.Models.LookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
